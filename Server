interface Reverse extends Remote{
 public String reverse(String str) throws RemoteException;
}
/*
 * Серверный Класс 
 */
class ReverseImpl implements Reverse{
	
	public String reverse(String str) throws RemoteException {
	 
		return new StringBuilder(str).reverse().toString();
	 
	}
}
public  class Person {
	
	public static final String UNIC_BINDING_NAME = "server.reverse";

	public static void main(String[] args) throws Exception
	{
	 //создание объекта для удаленного доступа
	 final ReverseImpl service = new ReverseImpl();

	 //создание реестра расшареных объетов
	 final Registry registry = LocateRegistry.createRegistry(4011);
	 //создание "заглушки" – приемника удаленных вызовов
	 Remote stub = UnicastRemoteObject.exportObject(service, 0);
	 //регистрация "заглушки" в реесте
	 registry.bind(UNIC_BINDING_NAME, stub);

	 //усыпляем главный поток, иначе программа завершится
	 Thread.sleep(Integer.MAX_VALUE);
	}

}
